"use strict";(self.webpackChunkgovernify_docs=self.webpackChunkgovernify_docs||[]).push([[186],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),d=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(a),m=n,u=c["".concat(o,".").concat(m)]||c[m]||h[m]||i;return a?r.createElement(u,s(s({ref:t},p),{},{components:a})):r.createElement(u,s({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:n,s[1]=l;for(var d=2;d<i;d++)s[d]=a[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8708:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const i={title:"Assets Manager",description:"Assets Manager",hide_table_of_contents:!1,sidebar_position:4},s="Assets Manager",l={unversionedId:"development/services/assets-manager",id:"development/services/assets-manager",title:"Assets Manager",description:"Assets Manager",source:"@site/docs/development/services/assets-manager.md",sourceDirName:"development/services",slug:"/development/services/assets-manager",permalink:"/development/services/assets-manager",draft:!1,editUrl:"https://github.com/governify/governify-docs/edit/main/docs/development/services/assets-manager.md",tags:[],version:"current",lastUpdatedBy:"Rafael Fresno",lastUpdatedAt:1719909603,formattedLastUpdatedAt:"Jul 2, 2024",sidebarPosition:4,frontMatter:{title:"Assets Manager",description:"Assets Manager",hide_table_of_contents:!1,sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Computer PPINOT",permalink:"/development/services/collectors/computer-PPINOT"},next:{title:"Scopes Manager",permalink:"/development/services/scopes-manager"}},o={},d=[{value:"Overview",id:"overview",level:2},{value:"Static Assets",id:"static-assets",level:3},{value:"Render Views",id:"render-views",level:4},{value:"Dashboard Templates",id:"dashboard-templates",level:4},{value:"Agreement Templates",id:"agreement-templates",level:4},{value:"Director Scripts",id:"director-scripts",level:4},{value:"Scopes File",id:"scopes-file",level:4},{value:"Logs",id:"logs",level:4},{value:"Infrastructure.yaml",id:"infrastructureyaml",level:4},{value:"API",id:"api",level:2},{value:"Interface",id:"interface",level:2}],p={toc:d},c="wrapper";function h(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"assets-manager"},"Assets Manager"),(0,n.kt)("hr",null),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},"Assets described here are common to Governify Ecosystem, static files may vary depending on the specific infrastructure.")),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"The assets manager is the core component for serving all the files that need to be accessed via network. This includes the static files of the web applications, the templates for the agreements or the template for dashboards. The assets manager counts with a visual code editor on the web interface to edit the files directly from the browser, as described in the ",(0,n.kt)("a",{parentName:"p",href:"#interface"},"Interface")," section. However, all files are served through the API exposed by the express server integrated within the service. The following diagram shows the typical interactions between the services surrounding the assets manager."),(0,n.kt)("mermaid",{value:"---\ntitle: Assets Manager Diagram\n---\nflowchart BT\n    subgraph StaticAssets [Static Assets]\n        rv[Render Views]\n        dt[Dashboard Templates]\n        at[Agreement Templates]\n        ds[Director Scripts]\n        sf[Scopes File]\n    end\n\n    AssetsManager <--\x3e StaticAssets\n    Render -- Get Views --\x3e AssetsManager\n    Reporter -- Get Dashboard Templates --\x3e AssetsManager\n    Registry -- Get Agreement Templates --\x3e AssetsManager\n    Director -- Get Director Scripts --\x3e AssetsManager\n    ScopeManager -- Get Scopes File --\x3e AssetsManager\n    "}),(0,n.kt)("h3",{id:"static-assets"},"Static Assets"),(0,n.kt)("p",null,"As shown in the diagram above, the Assets Manager serves a set of static assets that are used by the other services. Apart from the ones represented in the diagram, there are also some other files such as logs or the infrastructure.yaml file. The subsections below describe each of the static assets in detail."),(0,n.kt)("h4",{id:"render-views"},"Render Views"),(0,n.kt)("p",null,"Currently Governify uses a generic implementation of the ",(0,n.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"},"MVC pattern")," where the client components (views and controllers) are requested through network communication by the render service to the assets manager. This means that the render service, as its name states, is just in charge of rendering the views and controllers requested by the client."),(0,n.kt)("p",null,"Currently, the views and controllers are written in ",(0,n.kt)("a",{parentName:"p",href:"https://angularjs.org/"},"AngularJS")," and are served as static files by the assets manager. They are located under the ",(0,n.kt)("inlineCode",{parentName:"p"},"/public/renders")," directory of the assets manager."),(0,n.kt)("h4",{id:"dashboard-templates"},"Dashboard Templates"),(0,n.kt)("p",null,"The Dashboard templates are JSON and JS files requested by the Reporter to build the dashboards that are rendered by the dashboard service afterwards. The JSON file serves as a base for the dashboard and the JS file is used to define modifications and overlays to the base dashboard. The dashboard templates are located under the ",(0,n.kt)("inlineCode",{parentName:"p"},"/public/grafana-dashboards")," directory of the assets manager."),(0,n.kt)("h4",{id:"agreement-templates"},"Agreement Templates"),(0,n.kt)("p",null,"The agreement templates are JSON files requested by the Registry to build the agreements and store them along with theis states. The agreement templates location may vary depending on the specific infrastructure, but they are usually located under one of the following directories:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/public/renders/tpa")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/public/renders/tpa/agreements")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/public/renders/renders/{agreement}/agreement.json"))),(0,n.kt)("h4",{id:"director-scripts"},"Director Scripts"),(0,n.kt)("p",null,"Director scripts are also templates used to create tasks executed periodically by the director service. They are files written in JS to which a JSON configuration is applied runtime. The director scripts are located under the ",(0,n.kt)("inlineCode",{parentName:"p"},"/public/director")," directory of the assets manager."),(0,n.kt)("p",null,"Appart from the scripts located in the directory mentioned above, there are also scripts which are used to create and restore database backups. These scripts are located under the ",(0,n.kt)("inlineCode",{parentName:"p"},"/public/database")," directory of the assets manager."),(0,n.kt)("h4",{id:"scopes-file"},"Scopes File"),(0,n.kt)("p",null,"The scopes file is used by the scope manager to determine the scope of each agreement registered in Governify. Thus, it is a scope registry where all the scopes are stored in a JSON file. This file is located in the ",(0,n.kt)("inlineCode",{parentName:"p"},"/private/scope-manager")," directory of the assets manager, which is password-protected when requesting it through the API."),(0,n.kt)("h4",{id:"logs"},"Logs"),(0,n.kt)("p",null,"The logs files generated by different services are stored inside the ",(0,n.kt)("inlineCode",{parentName:"p"},"/public/logs")," directory of the assets manager. The Commons Library is the one which implements the logging system through ",(0,n.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/winston"},"Winston")," and stores the logs in the assets manager."),(0,n.kt)("h4",{id:"infrastructureyaml"},"Infrastructure.yaml"),(0,n.kt)("p",null,"As explained in the ",(0,n.kt)("a",{parentName:"p",href:"/architecture/intro#service-discovery--registry"},"Architecture section")," the infrastructure.yml is a file that contains the routes to each of the infrastructure services. It is used to implement service discovery and is located in the root of the ",(0,n.kt)("inlineCode",{parentName:"p"},"/public")," directory of the assets manager. The following example shows the structure of the infrastructure.yaml file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"internal:\n  render:\n    default: 'angular'\n    angular: 'http://governify-render'\n  assets:\n    default: 'theia'\n    theia: 'http://governify-assets-manager'\n[...]\nexternal:\n  render: \n    default: 'angular'\n    angular: 'https://ui{{dns.governify}}'\n  assets:\n    default: 'theia'\n    theia: 'https://assets{{dns.governify}}'\n[...]\ndns:\n  default: 'governify'\n  governify: '$_[SERVICES_PREFIX]$_[DNS_SUFFIX]' # Environment vars\n")),(0,n.kt)("h2",{id:"api"},"API"),(0,n.kt)("p",null,"The assets manager API is composed of the following endpoints:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Method"),(0,n.kt)("th",{parentName:"tr",align:null},"Endpoint"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GET"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"/api/v1/info/{path}?private_key={key}")),(0,n.kt)("td",{parentName:"tr",align:null},"Returns the list of files located in the ",(0,n.kt)("inlineCode",{parentName:"td"},"{path}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GET"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"/api/v1/public/{path}")),(0,n.kt)("td",{parentName:"tr",align:null},"Returns the file located in the ",(0,n.kt)("inlineCode",{parentName:"td"},"{path}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"POST"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"/api/v1/public/{path}")),(0,n.kt)("td",{parentName:"tr",align:null},"Creates the file sent in ",(0,n.kt)("inlineCode",{parentName:"td"},"req.files")," at ",(0,n.kt)("inlineCode",{parentName:"td"},"{path}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"PUT"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"/api/v1/public/{path}")),(0,n.kt)("td",{parentName:"tr",align:null},"Updates the file located in the ",(0,n.kt)("inlineCode",{parentName:"td"},"{path}")," with body content")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"PATCH"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"/api/v1/public/{path}")),(0,n.kt)("td",{parentName:"tr",align:null},"Updates the file located in the ",(0,n.kt)("inlineCode",{parentName:"td"},"{path}")," with body content")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GET"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"/api/v1/private/{path}?private_key={key}")),(0,n.kt)("td",{parentName:"tr",align:null},"Returns the file located in the ",(0,n.kt)("inlineCode",{parentName:"td"},"{path}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"POST"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"/api/v1/private/{path}?private_key={key}")),(0,n.kt)("td",{parentName:"tr",align:null},"Creates the file sent at ",(0,n.kt)("inlineCode",{parentName:"td"},"{path}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"PUT"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"/api/v1/private/{path}?private_key={key}")),(0,n.kt)("td",{parentName:"tr",align:null},"Updates the file located in the ",(0,n.kt)("inlineCode",{parentName:"td"},"{path}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"PATCH"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"/api/v1/private/{path}?private_key={key}")),(0,n.kt)("td",{parentName:"tr",align:null},"Updates the file located in the ",(0,n.kt)("inlineCode",{parentName:"td"},"{path}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"DELETE"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"/api/v1/private/{path}?private_key={key}")),(0,n.kt)("td",{parentName:"tr",align:null},"Deletes the file located in the ",(0,n.kt)("inlineCode",{parentName:"td"},"{path}"))))),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Note that when accessing the ",(0,n.kt)("inlineCode",{parentName:"p"},"/private")," endpoints, the ",(0,n.kt)("inlineCode",{parentName:"p"},"private_key")," query parameter is required. This parameter is the password used to protect the private files.")),(0,n.kt)("h2",{id:"interface"},"Interface"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://theia-ide.org/"},"Theia")," is an open source clound and desktop IDE platform for modifiying files and coding. The assets integrates a simple image of it to add the ability to modify it's files directly from the web browser. By accessing to the assets root URL/IP it will redirect to the Theia IDE. Use the credentials on .env to log in and you will be able to see all the public and private files in the folder hierarchy."),(0,n.kt)("p",null,"Theia cannot modify files if the docker volume is mapped to a folder instead of a docker volume. You can download the files directly from theia, create a volume, restart the service and drag in all the files directly to the files hierarchy."))}h.isMDXComponent=!0}}]);